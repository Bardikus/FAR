<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_monster</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//--Base Stats------------------------------------
hp           = 50
spd          = 0.4
spd_normal   = spd
spd_charge   = spd * 3
spd_stun     = spd / 1.5
dmg          = 1
xp_reward    = 5

//------------------------------------------------

//--AI Variables----------------------------------
directionFacing             = 1 // 0 = right; 1 = left
isMoving                    = 0
path_smartAI                = path_add()
pathFindingStarted          = false
shouldSpread                = true
aggroRadius                 = 70
chargeRadius                = 25
isCharger                   = false
canCharge                   = true
stunTimeAfterCharge         = 180
AI_path_scan_refresh_rate   = 15
//------------------------------------------------

//----DRAW VARIABLES------------------------------
main_sprite                 = spr_monster
shadow_sprite               = spr_shadow
shadow_offset_X             = -6
shadow_offset_Y             = 0
hopVar                      = 0
//------------------------------------------------




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///stunTimeAfterCharge &amp;&amp; canCharge
canCharge = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spd = 0.4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pathFindingStarted = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PATHFINDING
//CHECK TO SEE IF THE PLAYER IS ALIVE AND A PATHFIND HASN'T ALREADY STARTED
if (instance_exists(obj_player) &amp;&amp; pathFindingStarted == false &amp;&amp; distance_to_object(obj_player) &lt; aggroRadius )
{
    mp_grid_clear_all(AI_grid);       //creates a GRID
    mp_grid_add_instances(AI_grid, obj_block, false); //adds obj_block objects as obstacles;
    mp_grid_path(AI_grid, path_smartAI, x, y, obj_player.x + 8, obj_player.y + 8, true);  //compute a path on the created GRID towards the player position 
    if (path_exists(path_smartAI))
    {
        if (isCharger == true &amp;&amp; distance_to_object(obj_player) &lt; chargeRadius)
        {
           if (canCharge == true)
           {
               spd = spd_charge
               canCharge = false
               alarm[2]  = stunTimeAfterCharge
           }
           else
           {
               spd = spd_stun
           }
        }
        else
           spd = spd_normal
        pathFindingStarted = true;
        alarm[0] = AI_path_scan_refresh_rate;
        path_start(path_smartAI, spd, 0, 1) //start moving on the previously created path
    }
}
else if ( distance_to_object(obj_player) &gt; aggroRadius)
{   
    path_speed = 0
    path_end();
}
//IF THE PLAYER DIED, STOP PATHFINDING
if (!instance_exists(obj_player))
{
    path_end();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVE STATE6
if (path_speed &gt; 0)
    isMoving = 1
else
    isMoving = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HOPVAR
///HOP VAR
/// Make the object hop only when moving
if (isMoving == true)
{
    hopVar = sin (get_timer() / 50000)
}
else
{
    hopVar = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DIRECTION FACING
if(direction &gt; 90 &amp;&amp; direction &lt; 270)
    directionFacing = -1
else
    directionFacing = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_monster">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( distance_to_object(other) &lt; 1)
{

    var i;
    i = point_direction(other.x, other.y, x, y);
    
    if (!place_meeting(x + lengthdir_x(1, i), y + lengthdir_y(1, i), obj_block))
    {
      x += lengthdir_x(1, i);
      y += lengthdir_y(1, i);
    }
    
    
    //spd = 0;
    alarm[1] = 60;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bolt">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_player))
{
    with(other)
    {
        if (dealtDamage == false) //has this projectile dealt damage already?; prevent enemy melt with 1 projectile
        {
            dealtDamage = true  // mark this projectile as already done damage;
            finalDamage = script_execute(scr_Calculate_Damage, obj_player.dmg_ranged, obj_player.crit_Chance_Percent, obj_player.crit_Damage_Percent)
            script_execute(scr_createDamageNumber, finalDamage, obj_player.dmg_ranged)
        }
    }   
    
    hp -= other.finalDamage
    if(hp &lt;= 0)
    {
        //obj_player.xp_current += xp_reward
        instance_destroy() //destroy monster if his health is 0
    }
    
    with(other)
    {           
      instance_destroy(); //destroy bullet
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(
                shadow_sprite, 
                image_index, 
                x + shadow_offset_X, 
                y + shadow_offset_Y, 
                image_xscale, 
                image_yscale, 
                image_angle,
                image_blend, 
                image_alpha * 0.32);
                
draw_sprite_ext(
                main_sprite, 
                image_index, 
                x, 
                y + hopVar, 
                image_xscale * directionFacing, 
                image_yscale, 
                image_angle,
                image_blend, 
                image_alpha);           

//DEBUG

//SEE FOV scan in real time
/*
if (distance_to_object(obj_player) &lt; aggroRadius)
{
    if collision_line( x, y, obj_player.x, obj_player.y, obj_block, false, true )
    {
        draw_set_color(c_red)
        draw_line(x, y, obj_player.x + 8 , obj_player.y + 8)
    }
    else
    {
        draw_set_color(c_green)
        draw_line(x, y, obj_player.x + 8 , obj_player.y + 8)
    }
}
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//SYSTEM VARIABLES
window_set_cursor(cr_none);
cursor_sprite = spr_customCursor;
draw_set_font(fnt_default);

GUI_scaleFactor = 4
GUI_defaultScaleFactor = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room != room_menu)
{
//CAMERA stuff-------------------------
targetX= obj_player.x;
targetY= obj_player.y;

verCameraAdjustment   = 10;
horCameraAdjustment = 6;

view_xview[0]=(view_xview[0]*7+targetX)/8 - verCameraAdjustment;//the xview is weighed *7 here. xview*7+targetX*1 --&gt; 8
view_yview[0]=(view_yview[0]*7+targetY)/8 - horCameraAdjustment;


//view_angle[0] = 2 //sets camera angle to something different than 0, in this example 2 degrees tilted
//view_angle[0] += 0.5 //rotates camera constantly, creates fun dizzines
}

if (keyboard_check_pressed(vk_escape))
{
 room_goto(room_menu)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//HEALTH AND STAMINA
//Health
if (room != room_menu)
{
draw_sprite_ext(spr_playerHP_total, image_index, x + 6, y + 5, image_xscale * 6, image_yscale * 2, image_angle, c_white, image_alpha)
draw_sprite_ext(spr_playerHP_curr, image_index, x + 6, y + 5, image_xscale * 6, image_yscale * 2, image_angle, c_white, image_alpha)


//Stamina
draw_sprite_ext(spr_playerSTA_total, image_index, x + 6, y + 24, image_xscale * 6, image_yscale * 2, image_angle, c_white, image_alpha)
draw_sprite_ext(spr_playerSTA_curr, image_index, x + 6, y + 24, image_xscale * 6 * global.playerStaminaCur/global.playerStaminaMax, image_yscale * 2, image_angle, c_white, image_alpha)
}
/*
//DEBUG------------------------------
draw_text(0, 0, "SPD : " + string(obj_player.speed))

draw_text(0, 12, "playerIsMoving " + string(global.isMoving));
draw_text(0, 24, "window_get_height()" + string(window_get_height()))



//DRAW XP BAR
display_set_gui_maximise(GUI_scaleFactor, GUI_scaleFactor, 0, 0);
draw_sprite_ext(
                spr_xpBarOutline, 
                image_index, 
                x, 
                y + window_get_height() / GUI_scaleFactor - sprite_get_height(spr_xpBarOutline), 
                image_xscale * 100, //* window_get_width() / GUI_scaleFactor , 
                image_yscale, 
                image_angle, 
                c_white, 
                image_alpha)
display_set_gui_maximise(GUI_defaultScaleFactor, GUI_defaultScaleFactor, 0, 0);

//Sword attack debug 
/*
draw_text(0, 12, "P1: " + string(global.swordPhase1))
draw_text(0, 24, "P2: " + string(global.swordPhase2))
draw_text(0, 36, "P3: " + string(global.swordPhase3))

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
